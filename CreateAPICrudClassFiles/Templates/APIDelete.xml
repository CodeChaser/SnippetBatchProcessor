<?xml version="1.0" encoding="utf-8" ?>
<code>
  <![CDATA[using System;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;
using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using Azure.Function.Abstractions.Models.Global;
using Azure.Function.Abstractions.StaticHelpers;
using Azure.Function.Abstractions.Models.Entitys;
using Azure.Function.Abstractions.Models.Requests;
using Azure.Function.Repository.Services;
using Azure.Function.Services.API.v1.StaticHelpers;

namespace UBC.Pathways.Azure.KeyCard.Function.Services.API.v1.Users
{
    public class api_Delete$EntityTableRowType$
    {
        private readonly ProcessOperations _processOperations;

        public api_Delete$EntityTableRowType$(
            ProcessOperations processOperations)
        {
            this._processOperations = processOperations;
        }

        [FunctionName("api_Delete$EntityTableRowType$")]
        [OpenApiOperation(operationId: "Run", tags: new[] { "$EntityTableRowType$s" }, Description = "Deletes a (Project row) by [RowKey] in the table.")]
        [OpenApiSecurity("function_key", SecuritySchemeType.ApiKey, Name = "code", In = OpenApiSecurityLocationType.Query)]
        [OpenApiParameter(name: "rowkey", In = ParameterLocation.Path, Required = true, Type = typeof(string), Description = "The **rowkey** parameter")]

        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "application/json", bodyType: typeof(OperationResponse), Description = "Request was successful.")]

        [OpenApiResponseWithBody(statusCode: HttpStatusCode.Unauthorized, contentType: "application/json", bodyType: typeof(OperationResponse), Example = typeof(OperationResponse401Example), Description = "Unauthorized access due to invalid token.")]
        [OpenApiResponseWithBody(statusCode: HttpStatusCode.Forbidden, contentType: "application/json", bodyType: typeof(OperationResponse), Example = typeof(OperationResponse403Example), Description = "Unauthorized access due to invalid API access key.")]
        [OpenApiResponseWithBody(statusCode: HttpStatusCode.InternalServerError, contentType: "application/json", bodyType: typeof(OperationResponse), Example = typeof(OperationResponse500Example), Description = "Internal Server Error. See Error in response for details.")]

        public async Task<IActionResult> Run(
             [HttpTrigger(AuthorizationLevel.Function, "delete", Route = "generictableapi/v1/$EntityTableRowType$s/delete/{rowkey}")] HttpRequest httpRequest, string rowkey, ILogger log)
        {
            var verboseErrors =
                !string.IsNullOrEmpty(httpRequest.Headers["verboseErrors"]) && httpRequest.Headers["verboseErrors"] == "true";
            var verboseAzureResponse =
                !string.IsNullOrEmpty(httpRequest.Headers["verboseAzureResponse"]) && httpRequest.Headers["verboseAzureResponse"] == "true";

            OperationResponse processOperationsResponse;
                
            try
            {
                var hasErrors = false;

                if (!string.IsNullOrEmpty(rowkey))
                {
                    processOperationsResponse = await this._processOperations
                        .ProcessDeleteEntityAsync<$EntityTableRowType$Entity>(rowkey);

                    // no issues lets continue processing
                    if (string.IsNullOrEmpty(processOperationsResponse.HasError))
                    {
                        if (!verboseAzureResponse)
                        {
                            processOperationsResponse.AzureResponseBodyJson
                                = "[Header Details suppressed] -> ('Header: verboseAzureResponse Value: false' or missing.)";
                        }
                    }

                    /// error trap return forcing different return codes
                    if (hasErrors)
                    {
                        var exceptionResult = HandleResponseErrors
                            .FormatControllerErrors(500, null, processOperationsResponse, verboseErrors);

                        return exceptionResult;
                    }
                }
                else
                {
                    processOperationsResponse = new OperationResponse();
                    var uriPath = string.Empty;

                    var azureFunctionAttributes = FunctionReflectionInfo.GetFunctionAttributeInfo<api_Delete$EntityTableRowType$>();
                    processOperationsResponse.RequestStatus = "Failed.";

                    if (azureFunctionAttributes != null)
                    {
                        uriPath = azureFunctionAttributes.Route;
                    }
                    processOperationsResponse.ErrorMessageShort = $MissingRowKeyMessage$;

                    // handled missing query arguments
                    var exceptionResult = HandleResponseErrors
                            .FormatControllerErrors(400, null, processOperationsResponse);

                    return exceptionResult;
                }
            }
            catch (Exception ex)
            {
                ex.Data.Add("ErrorSourceMethod", MethodBase.GetCurrentMethod().DeclaringType.FullName);
                return HandleResponseErrors.FormatControllerErrors(500, ex, null, verboseErrors);
            }

            return new ObjectResult(processOperationsResponse);
        }
     }
}]]>
</code>
